[project]
name = "hifz"
version = "0.1.0"
description = "A flashcard application."
readme = "README.md"
requires-python = ">=3.12"
dependencies = []


[project.optional-dependencies]
test = [
    "pytest-mock>=3.14.0",
    "pytest>=8.3.3",
    "coverage>=7.6.3",
]
gui = [
    "pyqt6>=6.7.1",
]
docs = [
    "sphinx>=8.1.3",
    "furo",  # Theme
    "myst_parser >=0.13",  # Markdown
    "sphinx_copybutton",  # Easy code copy button
]
tui = [
    "textual>=0.83.0",
]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"


[tool.setuptools]
packages = { find = { where = ["src"] } }


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "info"
testpaths = [
    "tests",
]


[tool.mypy]
mypy_path = ["src"]
files = ["src", "tests"]
python_version = "3.12"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
exclude = "src/hifz/visualizers/gui.py"

[tool.mypy.PyQt6.*]
ignore_missing_imports = true

[tool.ruff.lint]
extend-select = [
    "B",           # flake8-bugbear
    "D",           # pydocstyle
    "I",           # isort
    "ARG",         # flake8-unused-arguments
    "C4",          # flake8-comprehensions
    "EM",          # flake8-errmsg
    "ICN",         # flake8-import-conventions
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "RET",         # flake8-return
    "RUF",         # Ruff-specific
    "SIM",         # flake8-simplify
    "TID251",      # flake8-tidy-imports.banned-api
    "T20",         # flake8-print
    "ANN204",      # flake8-annotations
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
ignore = [
    "PLR",    # Design related pylint codes
    "PT004",  # Incorrect check, usefixtures is the correct way to do this
    "RUF012", # Would require a lot of ClassVar's
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"importlib.abc".msg = "Use sp_repo_review._compat.importlib.resources.abc instead."
"importlib.resources.abc".msg = "Use sp_repo_review._compat.importlib.resources.abc instead."

[tool.coverage.report]
exclude_also = [
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]
